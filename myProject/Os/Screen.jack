// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 256 rows (indexed 0..255, top to bottom)
 * of 512 pixels each (indexed 0..511, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array addr, twoToThe;
    static boolean color;
    /** Initializes the Screen. */
    function void init() {
        let addr = 16384;
        let color = true;
        let twoToThe = Array.new(17);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384; //注意jack只支持到32767,所以2的15次方实际为负数,需要用这样的trick
        let twoToThe[16] = 0; //特殊需要
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int index;
        let index = 0;
        while(index < 8192){
            let addr[index] = 0;
            let index = index + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int temp, mask;
        if((x < 0) | (x > 511) | (y < 0) | (y > 255)){
            do Sys.error(4);
        }
        let temp = y*32 + (x/16);
        let mask = twoToThe[x & 15];
        if(~(color = 0)){
            let addr[temp] = addr[temp] | mask;
        }else{
            let addr[temp] = addr[temp] & (~mask);
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int dx, dy, temp, diff, a, b;
        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;

            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let dx = x2 - x1;
        let dy = y2 - y1;
        if(dy = 0){
            do drawHorizontalLine(x1, x2, y1);
            return;
        }
        if(dx = 0){
            do drawVerticalLine(x1, y1, y2);
            return;
        }
        let diff = 0;
        let a = 0;
        let b = 0;
        if(dy > 0){
            while(~(a > dx) & ~(b > dy)){
                do drawPixel(x1 + a, y1 + b);
                if(diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }   
        }else{
            let dy = -dy;
            while(~(a > dx) & ~(b > dy)){
                do drawPixel(x1 + a, y1 - b);
                if(diff < 0){
                    let a = a + 1;
                    let diff = diff + dy;
                }else{
                    let b = b + 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
        
    }

    function void drawHorizontalLine(int x1, int x2, int y){
        var int temp, left, right, index;
        if(x1 > x2){
            let temp = x1;
            let x1 = x2;
            let x2 = temp;
        }
        let temp = y*32;
        let left = temp + (x1/16);
        let right = temp + (x2/16);
        let index = left + 1;
        while(index < right){
            let addr[index] = color;
            let index = index + 1;
        }
        let x1 = x1 & 15;
        let x2 = x2 & 15;
        if(left = right){
            let temp = twoToThe[x2 + 1] - twoToThe[x1]; //mask
            if(~(color = 0)){
                let addr[left] = addr[left] | temp;
            }else{
                let addr[left] = addr[left] & ~temp;
            }
            return;
        }
        let temp = twoToThe[x1] - 1; //mask1
        let index = twoToThe[x2 + 1] - 1; //mask2
        if(~(color = 0)){     
            let addr[left] = addr[left] | ~temp;
            let addr[right] = addr[right] | index;
        }else{
            let addr[left] = addr[left] & temp;
            let addr[right] = addr[right] & ~index;
        }
        return;
    }

    function void drawVerticalLine(int x, int y1, int y2){
        var int temp, mask;
        if(y1 > y2){
            let temp = y1;
            let y1 = y2;
            let y2 = temp;
        }
        let temp = y1*32 + (x/16);
        let mask = twoToThe[x & 15];
        if(~(color = 0)){
            while(~(y1 > y2)){
                let addr[temp] = addr[temp] | mask;
                let y1 = y1 + 1;
                let temp = temp + 32;
            }
        }else{
            while(~(y1 > y2)){
                let addr[temp] = addr[temp] & (~mask);
                let y1 = y1 + 1;
                let temp = temp + 32;
            }
        }    
        return;

    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int temp, left, right, index;
        if((x1 > x2) | (y1 > y2)){
            do Sys.error("drawRectangle error");
        }else{
            let temp = y1*32;     
            let left = temp + (x1/16);
            let right = temp + (x2/16);
            let x1 = x1 & 15;
            let x2 = x2 & 15;
            let y2 = y2 + 1;
            while(y1 < y2){
                //do drawHorizontalLine(x1, x2, y1);  
                //经实际测试该版本和调用函数相比节省不少时间             
                let index = left + 1;
                while(index < right){
                    let addr[index] = color;
                    let index = index + 1;
                }
                
                if(left = right){
                    let temp = twoToThe[x2 + 1] - twoToThe[x1]; //mask
                    if(~(color = 0)){
                        let addr[left] = addr[left] | temp;
                    }else{
                        let addr[left] = addr[left] & ~temp;
                    }                   
                }else{
                    let temp = twoToThe[x1] - 1; //mask1
                    let index = twoToThe[x2 + 1] - 1; //mask2
                    if(~(color = 0)){     
                        let addr[left] = addr[left] | ~temp;
                        let addr[right] = addr[right] | index;
                    }else{
                        let addr[left] = addr[left] & temp;
                        let addr[right] = addr[right] & ~index;
                    }
                }   
                let y1 = y1 + 1;
                let left = left + 32;
                let right = right + 32;
            }
        }
        return;
    }

/*性能较差
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx;
        if((x1 > x2) | (y1 > y2)){
            do Sys.error("drawRectangle error");
        }else{
            let y2 = y2 + 1;
            while(y1 < y2){
                do drawHorizontalLine(x1, x2, y1);
                let y1 = y1 + 1;
            }
        }
        return;
    }

*/
    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        var int d, len, temp;
        let len = r + r + 1;
        let d = 0;
        while(d < len){
            let temp = d - r;
            let temp = Math.sqrt(r*r - (temp*temp));
            do drawHorizontalLine(x - temp, x + temp, y + d - r);
            let d = d + 1;
        }
        return;

    }
}
