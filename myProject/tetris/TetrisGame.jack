/**
 * Represents a Tetris game.
 */
class TetrisGame {

    static TetrisGame instance; // the singelton, a Tetris game instance    

    field int exit;             //当前游戏是否已经结束
    field int score;            //当前游戏得分
    field Array twoToThe;       //辅助数组, 用来计算2的幂次方
    field Array row;            //储存已有图形的数组 原本只需要大小为18的数组, 为了方便碰撞检测, 改为22

    field int srand;            //控制产生块的随机数
    field int type;             //当前块的种类, 共有 S Z L L反 I O T 7种
    field int orientation;      //当前块的朝向
    field int x, y;             //当前块的位置, x表示18行中的某一行
    field int type_next;        //下一个块的种类
    field int orientation_next; //下一个块的朝向
    field Array typeList;       //储存块形状的数组

    field int px, py;           //组成块的像素点的基础坐标

    /** Constructs a new Tetris game. */
    constructor TetrisGame new() {
        do init();
	    do Screen.clearScreen();
        do Output.moveCursor(2,6);
        do Output.printString("Tetris Game");
        do Output.moveCursor(3,2);
        do Output.printString("written by chen sen");
        do Output.moveCursor(11,5);
        do Output.printString("SCORE:");
        do printScore();
        do Screen.setColor(true);
        /*
        do Screen.drawRectangle(179, 0, 331, 255);
        do Screen.setColor(false);
        do Screen.drawRectangle(190, 11, 320, 244);
        */
        do Screen.drawRectangle(184, 5, 326, 250);
        do Screen.setColor(false);
        do Screen.drawRectangle(190, 10, 320, 244);
        return this;
    }
    method void test() {
        var int i;
        let type = 0;
        let orientation = 0;
        let x = 0;
        let y = 0;
        do printSquare(true);
        let i = 0;
        while(i < 10){
            do rotate();
            do Sys.wait(1000);
        }
        
        return;
    }
    /** Deallocates the object's memory. */
    /*
    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }
    */

    /** Creates an instance of Tetris game, and stores it. */
    function void newInstance() {
        let instance = TetrisGame.new();
        return;
    }
    
    /** Returns the single instance of this Tetris game. */
    function TetrisGame getInstance() {
        return instance;
    }

    /** Starts the game, and andles inputs from the user that control
     *  the square's movement direction. */
    method void run() {
        var char key;
        var int i;
        var int waitTime;         //控制下降速度
        let waitTime = 32000;     //默认为0.5s左右下降一格
        do create();
        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                if(i = waitTime){
                    let i = 0;
                    do move(0);
                }
                let i = i + 1;
            }

            if (key = 130) { do move(1);  let srand = srand + i; }                    //left arrow
	        else {
	            if (key = 132) { do move(2);  let srand = srand + i; }                //right arrow
		        else {
                    if (key = 131) { do rotate();  let srand = srand + i;}            //up arrow 旋转
                    else {
                        if (key = 133) {                                                //down arrow 加速
                            do move(0);
                            let i = 0;
                            let waitTime = 1500; 
                            let srand = srand + i;
                        }        
                        else{
                            if (key = 140) { let exit = true; }                         //ESC
                        }  
                    }
		        }
            }
            // Waits for the key to be released.
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();      
                if(i = waitTime){
                    let i = 0;
                    do move(0);
                }
                let i = i + 1;
            }
            let waitTime = 32000;
        }

	    if (exit) {
            do Output.moveCursor(9,5);
	        do Output.printString("Game Over!");
	    }
            
        return;
    }

    method void init(){
        let px = 191;
        let py = 11;
        let type_next = 6;
        let orientation_next = 0;
        let row = Array.new(22);
        let row[18] = true;
        let row[19] = true;
        let row[20] = true;
        let row[21] = true;

        let exit = false;
        let score = 0;
        let srand = 0;
        let twoToThe = Array.new(12);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;

        let typeList = Array.new(7);
        let typeList[0] = Array.new(4);             //S有两种形态
        do createType(typeList[0], 0, 1, 3, 2, 0);
        do createType(typeList[0], 1, 6, 3, 0, 0);
        do createType(typeList[0], 2, 1, 3, 2, 0);
        do createType(typeList[0], 3, 6, 3, 0, 0);
        let typeList[1] = Array.new(4);             //Z有两种形态
        do createType(typeList[1], 0, 3, 6, 0, 0);
        do createType(typeList[1], 1, 2, 3, 1, 0);
        do createType(typeList[1], 2, 3, 6, 0, 0);
        do createType(typeList[1], 3, 2, 3, 1, 0);
        let typeList[2] = Array.new(4);             //L有四种形态
        do createType(typeList[2], 0, 1, 1, 3, 0);
        do createType(typeList[2], 1, 7, 1, 0, 0);
        do createType(typeList[2], 2, 3, 2, 2, 0);
        do createType(typeList[2], 3, 4, 7, 0, 0);
        let typeList[3] = Array.new(4);             //L反有四种形态
        do createType(typeList[3], 0, 2, 2, 3, 0);
        do createType(typeList[3], 1, 1, 7, 0, 0);
        do createType(typeList[3], 2, 3, 1, 1, 0);
        do createType(typeList[3], 3, 7, 4, 0, 0);
        let typeList[4] = Array.new(4);             //I有两种形态
        do createType(typeList[4], 0, 1, 1, 1, 1);
        do createType(typeList[4], 1, 15, 0, 0, 0);
        do createType(typeList[4], 2, 1, 1, 1, 1);
        do createType(typeList[4], 3, 15, 0, 0, 0);
        let typeList[5] = Array.new(4);             //O有一种形态
        do createType(typeList[5], 0, 3, 3, 0, 0);
        do createType(typeList[5], 1, 3, 3, 0, 0);
        do createType(typeList[5], 2, 3, 3, 0, 0);
        do createType(typeList[5], 3, 3, 3, 0, 0);
        let typeList[6] = Array.new(4);             //T有四种形态
        do createType(typeList[6], 0, 2, 7, 0, 0);
        do createType(typeList[6], 1, 1, 3, 1, 0);
        do createType(typeList[6], 2, 7, 2, 0, 0);
        do createType(typeList[6], 3, 2, 3, 2, 0);
        return;
    }
    /* 储存块的形状数据 */
    method void createType(Array arr, int i, int a, int b, int c, int d){
        var Array cur;
        let cur = Array.new(4);
        let arr[i] = cur;
        let cur = arr[i];
        let cur[0] = a;
        let cur[1] = b;
        let cur[2] = c;
        let cur[3] = d;
        return;
    }

    /*当前块顺时针旋转90度*/
    method void rotate(){
        var int prev, cur;
        let prev = orientation;
        let orientation = orientation + 1;
        if(orientation = 4){
            let orientation = 0;
        }
        let cur = orientation;
        if(border()){
            let orientation = prev;
        }else{
            let orientation = prev;
            do printSquare(false);
            let orientation = cur;
            do printSquare(true); 
        }
        return;
    } 

    /*显示或者消除当前块*/
    method int printSquare(boolean color){
        var int i, j;
        var Array a, b, cur;
        let i = 0;
        let a = typeList[type];
        let b = a[orientation];
        while(i < 4){
            let cur = b[i];
            let j = 0;
            while(j < 4){
                if(~(cur & twoToThe[j] = 0)){
                    do drawOne(x + i, y + j, color);
                }   
                let j = j + 1;
            }   
            let i = i + 1;
        }
        return;
    } 

    /*显示下一个块*/
    method int printNextSquare(){
        var int _x, _y, _type, _orientation;  // 备份
        let _x = x;
        let _y = y;
        let _type = type;
        let _orientation = orientation;
        let x = 0;
        let y = 0;
        let type = type_next;
        let orientation = orientation_next;
        let px = 400;
        let py = 110;
        do Screen.setColor(false);
        do Screen.drawRectangle(400, 110, 452, 162);
        do printSquare(true);

        let px = 191;
        let py = 11;
        let x = _x;
        let y = _y;
        let type = _type;
        let orientation = _orientation;
        return;
    } 

    /*产生一个新的块*/
    method void create(){
        let type = type_next;
        let orientation = orientation_next;
        let srand = srand & 32767;                        // 避免产生负数
        let type_next = srand - ((srand/7)*7);            // srand mod 7
        let orientation_next = srand - ((srand/4)*4);     // srand mod 4
        do printNextSquare();
        let x = 0;
        let y = 4;
        if(border()){
            let exit = true;
        }
        do printSquare(true);
        let srand = srand*8 + 3;
        return;
    }

    /*控制当前块的移动*/
    method void move(int direct){
        if(direct = 0){             // 向下移动一格
            let x = x + 1;
            if(border()){
                let x = x - 1;
                do getScore();
                do create();
            }else{
                let x = x - 1;
                do printSquare(false);
                let x = x + 1;
                do printSquare(true);                
            }
        }else{
            if(direct = 1){         // 向左移动一格
                let y = y - 1;
                if(border()){
                    let y = y + 1;
                }else{
                    let y = y + 1;
                    do printSquare(false);
                    let y = y - 1;
                    do printSquare(true);
                }
            }else{                  // 向右移动一格
                let y = y + 1;
                if(border()){
                    let y = y - 1;
                }else{
                    let y = y - 1;
                    do printSquare(false);
                    let y = y + 1;
                    do printSquare(true);
                }
            }
        }
        return;
    }
   
    /*判断是否需要消行并统计得分情况*/
    method void getScore(){
        var int i, iend, count;
        var Array a, b, cur;
        let i = x;
        let iend = Math.min(x + 4, 18);
        let a = typeList[type];
        let b = a[orientation];
        let count = 0;
        while(i < iend){                //得分策略可以改善
            let row[i] = row[i] + (b[i - x] * twoToThe[y]);
            if(row[i] = 1023){
                let count = count + 1;
                do clear(i);
            }
            let i = i + 1;
        }
        let score = score + (count * count * 100);
        do printScore();    
        do show();
        return; 
    }

    /*消除第i行数据, 并将i行以上数据向下平移一行*/
    method void clear(int i){
        var int cur, temp;
        let cur = i;
        while(cur > 0){ 
            let temp = cur - 1;         
            let row[cur] = row[temp];
            let cur = temp;
        }
        let row[0] = 0;
        return; 
    }  

    /*绘制一个小矩形,即一个最基本的像素点为12×12的块, 每两个块之间有一个像素隔开*/
    method void drawOne(int row, int col, int color){
        var int x, y;
        let x = (col*13) + px;
        let y = (row*13) + py;
        do Screen.setColor(color);
        do Screen.drawRectangle(x, y, x + 11, y + 11);
        return;
    }   

    /*检测是否越过边界或者碰到已有的图形*/
    method int border(){
        var int i;
        var Array a, b, cur;
        if(y < 0){
            return true;
        }
        let i = 0;
        let a = typeList[type];
        let b = a[orientation];
        while(i < 4){
            let cur = b[i] * twoToThe[y];
            if(~(cur < 1024) | ~(cur & row[x + i] = 0)){
                return true;
            }
            let i = i + 1;
        }
        return false;
    }    

    /*根据储存的数组绘制图形*/
    method void show(){
        var Array cur;
        var int mask, i, j;
        let i = 0;
        while(i < 18){
            let j = 0;
            let cur = row[i];
            let mask = 1;
            while(j < 10){
                do drawOne(i, j, cur & mask);
                let j = j + 1;
                let mask = twoToThe[j];
            }
            let i = i + 1;
        }
        return;
    }


    /*绘制当前分数*/
    method void printScore(){
        do Output.moveCursor(11,11);
        do Output.printInt(score);
        return;
    }
}