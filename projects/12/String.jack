// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array address;
    field int curLen, maxLen;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if(maxLength = 0){
            let maxLength = 1;
        }
        let address = Array.new(maxLength);
        let curLen = 0;
        let maxLen = maxLength;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do address.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return curLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return address[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let address[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if(curLen < maxLen){
            let address[curLen] = c;
            let curLen = curLen + 1;
        }       
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(curLen > 0){
            let curLen = curLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int ret, i, neg;
        let ret = 0;
        let neg = false;
        let i = 0;
        if((curLen > 0) & (address[0] = 45)){  // -:45
            let neg = true;
            let i = i + 1;
        }
        while((i < curLen) & (address[i] > 47) & (address[i] < 58)){  //0:48, 9:57
            let ret = 10*ret + address[i] - 48;
            let i = i + 1;
        }
        if(neg){
            let ret = -ret;
        }
        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int cur;
        let curLen = 0;
        if(val < 0){
            do appendChar(45); // -:45
            let val = -val;
        }
        do _setInt(val);
        return;    
    }

    /** val >= 0 */
    method void _setInt(int val) {
        var int cur;
        let cur = val - (val/10*10) + 48;   //0:48       
        let val = val/10;
        if(~(val = 0)){
            do _setInt(val);         
        }
        do appendChar(cur);
        return;  
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
