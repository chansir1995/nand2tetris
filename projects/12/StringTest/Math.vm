function Math.init 0
push constant 16
call Array.new 1
pop static 0
push static 0
push constant 0
add
push constant 1
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 1
add
push constant 2
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 2
add
push constant 4
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 3
add
push constant 8
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 4
add
push constant 16
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 5
add
push constant 32
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 6
add
push constant 64
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 7
add
push constant 128
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 8
add
push constant 256
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 9
add
push constant 512
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 10
add
push constant 1024
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 11
add
push constant 2048
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 12
add
push constant 4096
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 13
add
push constant 8192
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 14
add
push constant 16384
pop temp 0
pop pointer 1
push temp 0
pop that 0
push static 0
push constant 15
add
push constant 16384
push constant 16384
add
pop temp 0
pop pointer 1
push temp 0
pop that 0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto L0
push argument 0
neg
return
goto L1
label L0
label L1
push argument 0
return
function Math.multiply 2
push constant 0
pop local 0
push constant 0
pop local 1
label L2
push local 1
push constant 16
lt
not
if-goto L3
push argument 1
push static 0
push local 1
add
pop pointer 1
push that 0
and
push constant 0
eq
not
not
if-goto L4
push local 0
push argument 0
add
pop local 0
goto L5
label L4
label L5
push argument 0
push argument 0
add
pop argument 0
push local 1
push constant 1
add
pop local 1
goto L2
label L3
push local 0
return
function Math.divide 1
push argument 1
push constant 0
eq
not
if-goto L6
push constant 3
call Sys.error 1
pop temp 0
goto L7
label L6
label L7
push argument 0
call Math.abs 1
push argument 1
call Math.abs 1
call Math._div 2
pop local 0
push argument 0
push constant 0
gt
push argument 1
push constant 0
gt
eq
not
if-goto L8
push local 0
return
goto L9
label L8
push local 0
neg
return
label L9
function Math._div 2
push argument 0
push argument 1
lt
not
if-goto L10
push constant 0
return
goto L11
label L10
label L11
push argument 1
push argument 1
add
pop local 1
push local 1
push constant 0
lt
not
if-goto L12
push constant 0
pop local 0
goto L13
label L12
push argument 0
push local 1
call Math._div 2
pop local 0
label L13
push argument 0
push local 0
push local 1
call Math.multiply 2
sub
push argument 1
lt
not
if-goto L14
push local 0
push local 0
add
return
goto L15
label L14
push local 0
push local 0
add
push constant 1
add
return
label L15
function Math.sqrt 3
push argument 0
push constant 0
lt
not
if-goto L16
push constant 4
call Sys.error 1
pop temp 0
goto L17
label L16
label L17
push constant 0
pop local 0
push constant 7
pop local 1
label L18
push local 1
push constant 0
lt
not
not
if-goto L19
push local 0
push static 0
push local 1
add
pop pointer 1
push that 0
add
pop local 2
push argument 0
push local 2
call Math.divide 2
push local 2
lt
not
not
if-goto L20
push local 2
pop local 0
goto L21
label L20
label L21
push local 1
push constant 1
sub
pop local 1
goto L18
label L19
push local 0
return
function Math.max 0
push argument 0
push argument 1
lt
not
if-goto L22
push argument 1
return
goto L23
label L22
label L23
push argument 0
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto L24
push argument 0
return
goto L25
label L24
label L25
push argument 1
return
function Math.mod 0
push argument 0
push argument 0
push argument 1
call Math.divide 2
push argument 1
call Math.multiply 2
sub
return
