// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static Array twoToThe;
    /** Initializes the library. */
    function void init() {
        let twoToThe = Array.new(16);
        let twoToThe[0] = 1;
        let twoToThe[1] = 2;
        let twoToThe[2] = 4;
        let twoToThe[3] = 8;
        let twoToThe[4] = 16;
        let twoToThe[5] = 32;
        let twoToThe[6] = 64;
        let twoToThe[7] = 128;
        let twoToThe[8] = 256;
        let twoToThe[9] = 512;
        let twoToThe[10] = 1024;
        let twoToThe[11] = 2048;
        let twoToThe[12] = 4096;
        let twoToThe[13] = 8192;
        let twoToThe[14] = 16384;
        let twoToThe[15] = 16384 + 16384; //注意jack只支持到32767,所以2的15次方实际为负数,需要用这样的trick
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if(x < 0){
            return -x;
        }
        return x;
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int ret, i;
        let ret = 0;
        let i = 0;
        while(i < 16){
            if(~(y & twoToThe[i] = 0)){
                let ret = ret + x;
            }
            let x = x + x;
            let i = i + 1;
        }
        return ret;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        var int ret;
        if(y = 0){
            do Sys.error("divisior can't be zero");
        }
        let ret = _div(abs(x), abs(y));
        if((x > 0) = (y > 0)){
            return ret;
        }else{
            return -ret;
        }       
    }

    function int _div(int x, int y){
        var int z, y2;
        if(x < y){
            return 0;
        }
        let y2 = y + y;
        if(y2 < 0){
            let z = 0;
        }else{
            let z = _div(x, y2);
        }  
        if((x - (z*y2)) < y){
            return (z + z);
        }
        else{
            return (z + z + 1);
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int ret, i, temp;
        if(x < 0){
            do Sys.error("sqrt number can't be negative");
        }
        let ret = 0;
        let i = 7;
        while(~(i < 0)){
            let temp = ret + twoToThe[i];
            if(~(x/temp < temp)){
                let ret = temp;
            }
            let i = i - 1;
        }
        return ret;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if(a < b){
            return b;
        }
        return a;
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if(a < b){
            return a;
        }
        return b;
    }

    function int mod(int a, int b) {
        return a - ((a/b)*b);
    }

    function int getTwoToThe(int i) {
        if((i < 0) | (i > 15)){
            return 0;
        }else{
            return twoToThe[i];
        }
        
    }
}
