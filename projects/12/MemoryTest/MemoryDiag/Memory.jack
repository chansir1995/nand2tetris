// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array heap, memory;
    /** Initializes the class. */
    function void init() {
        let memory = 0;
        let heap = 2048;
        let heap[0] = null;     // nullÂç≥0
        let heap[1] = 14334; //16384 - 2048 - 2;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return memory[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let memory[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var Array block, freeList;
        let freeList = heap;
        while(~(freeList = null)){
            if(~(freeList[1] < (size + 2))){
                let freeList[1] = freeList[1] - size - 2;
                let block = freeList + 2 + freeList[1];
                //let freeList[0] = block;
                let block[0] = null;
                let block[1] = size;
                return block + 2;
            }
            let freeList = freeList[0];
        }
        do Sys.error("alloc failed: heap space exhausted");
        return 0;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        var Array freeList;
        let freeList = heap;
        while(~(freeList[0] = null)){
            let freeList = freeList[0];
        }
        let freeList[0] = o - 2;
        return;
    }    
}
